// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = []
  output          = "../../../../node_modules/@progwise/timebook-prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../../node_modules/.pothos/plugin-prisma/generated.ts"
}

model Project {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(255)
  startDate DateTime? @db.Date
  endDate   DateTime? @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectMemberships ProjectMembership[]
  tasks              Task[]
  reports            Report[]
}

enum Role {
  ADMIN
  MEMBER
}

model ProjectMembership {
  userId    String
  projectId String

  invitedAt        DateTime? @default(now())
  inviteAcceptedAt DateTime?
  updatedAt        DateTime  @updatedAt
  role             Role      @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Task {
  id         String   @id @default(cuid())
  title      String   @db.VarChar(255)
  hourlyRate Decimal? @db.Money
  projectId  String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  archivedAt DateTime?

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workHours WorkHour[]
  trackings Tracking[]
}

model WorkHour {
  id       String    @id @default(cuid())
  date     DateTime  @db.Date
  start    DateTime? @db.Time
  end      DateTime? @db.Time
  duration Int
  taskId   String
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([date, userId, taskId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Relations outside of next-auth:
  workhours          WorkHour[]
  projectMemberships ProjectMembership[]
  reports            Report[]
  tracking           Tracking?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  projectId String
  userId    String
  year      Int
  month     Int

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId, year, month])
}

model Tracking {
  userId String   @id
  taskId String
  start  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}
