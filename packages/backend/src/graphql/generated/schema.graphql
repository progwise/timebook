"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Adds the information whether the user can edit the entity
"""
interface ModifyInterface {
  """
  Can the user modify the entity
  """
  canModify: Boolean!
}

input MonthInput {
  month: Int!
  year: Int!
}

type Mutation {
  """
  Create a new project
  """
  projectCreate(data: ProjectInput!): Project!

  """
  Delete a project
  """
  projectDelete(
    """
    id of the project
    """
    id: ID!
  ): Project!
  projectLock(date: MonthInput!, projectId: ID!): Project!

  """
  Assign user to a project. This mutation can also be used for updating the role of a project member
  """
  projectMembershipCreate(projectId: ID!, role: Role! = MEMBER, userId: ID!): Project!

  """
  Unassign user to Project
  """
  projectMembershipDelete(projectId: ID!, userId: ID!): Project!

  """
  Assign user to a project by e-mail.
  """
  projectMembershipInviteByEmail(email: String!, projectId: ID!): Project!
  projectUnlock(date: MonthInput!, projectId: ID!): Project!

  """
  Update a project
  """
  projectUpdate(
    data: ProjectInput!

    """
    id of the project
    """
    id: ID!
  ): Project!

  """
  Archive a task
  """
  taskArchive(
    """
    id of the task
    """
    taskId: ID!
  ): Task!

  """
  Create a new Task
  """
  taskCreate(data: TaskInput!): Task!

  """
  Delete a task
  """
  taskDelete(
    """
    id of the task
    """
    id: ID!
  ): Task!

  """
  Lock a task for the current user
  """
  taskLock(taskId: ID!): Task!

  """
  Unlock a task for the current user
  """
  taskUnlock(taskId: ID!): Task!

  """
  Update a task
  """
  taskUpdate(
    data: TaskUpdateInput!

    """
    id of the task
    """
    id: ID!
  ): Task!

  """
  The ongoing time tracking will be deleted
  """
  trackingCancel: Tracking

  """
  Start time tracking for a task. When a tracking for the same task is already running the tracking keeps untouched. When a tracking for a different task is running, the on going tracking will be stopped and converted to work hours.
  """
  trackingStart(taskId: ID!): Tracking!

  """
  The ongoing time tracking will be stopped and converted to work hours
  """
  trackingStop: [WorkHour!]!

  """
  Create a new WorkHour
  """
  workHourCreate(data: WorkHourInput!): WorkHour!

  """
  Delete a work hour entry
  """
  workHourDelete(
    """
    id of the workHour item
    """
    id: ID!
  ): WorkHour!

  """
  Updates a work hour entry or creates if work hour does not exist
  """
  workHourUpdate(data: WorkHourInput!, date: Date!, taskId: ID!): WorkHour!
}

type Project implements ModifyInterface {
  """
  Can the user modify the entity
  """
  canModify: Boolean!
  endDate: Date

  """
  identifies the project
  """
  id: ID!

  """
  Is the project locked for the given month
  """
  isLocked(
    """
    The month to check. If empty the current month is used.
    """
    date: MonthInput
  ): Boolean!

  """
  Is the user member of the project
  """
  isProjectMember: Boolean!

  """
  List of users that are member of the project
  """
  members(
    """
    Set this to true if you want to see also the users who booked work hours on this project, but are no longer project members. This arg is useful for e.g. reports.
    """
    includePastMembers: Boolean! = false
  ): [User!]!
  startDate: Date

  """
  List of tasks that belong to the project. When the user is no longer a member of the project, only the tasks that the user booked work hours on are returned.
  """
  tasks(showArchived: Boolean! = false): [Task!]!
  title: String!
  workHours: [WorkHour!]!
}

enum ProjectFilter {
  ACTIVE
  ALL
  FUTURE
  PAST
}

input ProjectInput {
  end: Date
  start: Date
  title: String!
}

type Query {
  currentTracking: Tracking

  """
  Returns a single project
  """
  project(
    """
    Identifier for the project
    """
    projectId: ID!
  ): Project!

  """
  Returns all project of the signed in user that are active
  """
  projects(
    filter: ProjectFilter! = ACTIVE
    from: Date!

    """
    If true, projects where the user is no longer a project member but booked work hours in the given time frame are included.
    """
    includeProjectsWhereUserBookedWorkHours: Boolean! = false
    to: Date
  ): [Project!]!
  projectsCount(filter: ProjectFilter!, from: Date!, to: Date): Int!

  """
  Returns a monthly project report
  """
  report(
    month: Int!

    """
    Project identifier
    """
    projectId: ID!

    """
    if not set all users will be included in the report
    """
    userId: ID
    year: Int!
  ): Report!

  """
  Returns a single task
  """
  task(
    """
    Identifier for the task
    """
    taskId: ID!
  ): Task!

  """
  Returns a single user
  """
  user(
    """
    Identifier for the user. If not provided, the logged in user is returned
    """
    userId: ID
  ): User!

  """
  Returns a list of work hours for a given time period and a list of users
  """
  workHours(
    """
    Start of the time period
    """
    from: Date!

    """
    End of the time period. If not provided the from arg is used as the end.
    """
    to: Date

    """
    List of user ids. If not provided only the work hours of the current users are returned.
    """
    userIds: [ID!]
  ): [WorkHour!]!
}

type Report {
  groupedByDate: [ReportGroupedByDate!]!
  groupedByTask: [ReportGroupedByTask!]!
  groupedByUser: [ReportGroupedByUser!]!

  """
  If set to true the work hours can not be updated
  """
  isLocked: Boolean!
}

type ReportGroupedByDate {
  """
  Booking date of the work hour
  """
  date: Date!

  """
  Sum of the total duration of all the work hours for the specific date
  """
  duration: Int!
  workHours: [WorkHour!]!
}

type ReportGroupedByTask {
  """
  Sum of the total duration of all the work hours for the task
  """
  duration: Int!
  task: Task!
  workHours: [WorkHour!]!
}

type ReportGroupedByUser {
  """
  Sum of the total duration of all the work hours for a specific user
  """
  duration: Int!
  user: User!
  workHours: [WorkHour!]!
}

"""
Roles a user can have in a team
"""
enum Role {
  ADMIN
  MEMBER
}

type Task implements ModifyInterface {
  archived: Boolean!

  """
  Can the user modify the entity
  """
  canModify: Boolean!
  hasWorkHours: Boolean!

  """
  For calculating the money spent
  """
  hourlyRate: Float

  """
  Identifies the task
  """
  id: ID!
  isLocked: Boolean!

  """
  Is the task locked by an admin
  """
  isLockedByAdmin: Boolean!

  """
  Is the task locked by the user
  """
  isLockedByUser: Boolean!
  project: Project!

  """
  The user can identify the task in the UI
  """
  title: String!
  tracking: Tracking
  workHours(from: Date!, to: Date): [WorkHour!]!
}

input TaskInput {
  hourlyRate: Float
  isLocked: Boolean = false
  projectId: ID!
  title: String!
}

input TaskUpdateInput {
  hourlyRate: Float
  isLocked: Boolean
  projectId: ID
  title: String
}

type Tracking {
  start: DateTime!
  task: Task!
}

type User {
  durationWorkedOnProject(from: Date!, projectId: ID!, to: Date): Int!
  id: ID!
  image: String
  name: String

  """
  Role of the user in a project
  """
  role(projectId: ID!): Role!
}

type WorkHour {
  date: Date!

  """
  Duration of the work hour in minutes
  """
  duration: Int!

  """
  Identifies the work hour
  """
  id: ID!
  project: Project!

  """
  Task for which the working hour was booked
  """
  task: Task!

  """
  User who booked the work hours
  """
  user: User!
}

input WorkHourInput {
  date: Date!

  """
  Duration of the work hour in minutes
  """
  duration: Int!
  taskId: ID!
}
