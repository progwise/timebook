generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  title              String              @db.VarChar(255)
  endDate            DateTime?           @db.Date
  startDate          DateTime?           @db.Date
  customerId         String?
  teamId             String
  customer           Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  team               Team                @relation(fields: [teamId], references: [id])
  projectMemberships ProjectMembership[]
  tasks              Task[]
}

model ProjectMembership {
  invitedAt        DateTime? @default(now())
  inviteAcceptedAt DateTime?
  projectId        String
  updatedAt        DateTime  @updatedAt
  userId           String
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Task {
  id         String     @id @default(cuid())
  title      String     @db.VarChar(255)
  projectId  String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  archivedAt DateTime?
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workHours  WorkHour[]
}

model WorkHour {
  id        String    @id @default(cuid())
  date      DateTime  @db.Date
  userId    String
  taskId    String
  createdAt DateTime  @default(now())
  duration  Int
  end       DateTime? @db.Time(6)
  start     DateTime? @db.Time(6)
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([date, userId, taskId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  email              String?             @unique
  name               String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  projectMemberships ProjectMembership[]
  sessions           Session[]
  teamMemberships    TeamMembership[]
  workhours          WorkHour[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  theme           Theme            @default(BLUE)
  inviteKey       String           @unique @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  archivedAt      DateTime?
  customers       Customer[]
  projects        Project[]
  teamMemberships TeamMembership[]
}

model TeamMembership {
  id              String   @id @default(cuid())
  memberSince     DateTime @default(now())
  userId          String
  teamId          String
  role            Role     @default(MEMBER)
  capacityMinutes Int?
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Customer {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  projects  Project[]
}

enum Role {
  ADMIN
  MEMBER
}

enum Theme {
  GRAY
  RED
  YELLOW
  GREEN
  BLUE
  INDIGO
  PURPLE
  PINK
}
