### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Customer implements ModifyInterface {
  """
  Can the user modify the entity
  """
  canModify: Boolean!

  """
  Identifier of the customer
  """
  id: ID!

  """
  List of all customer projects
  """
  projects: [Project!]!

  """
  Title of the customer
  """
  title: String!
}

input CustomerInput {
  """
  Title of the customer
  """
  title: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
Adds the information whether the user can edit the entity
"""
interface ModifyInterface {
  """
  Can the user modify the entity
  """
  canModify: Boolean!
}

type Mutation {
  """
  Create a new customer for a team
  """
  customerCreate(data: CustomerInput!): Customer!

  """
  Delete a customer
  """
  customerDelete(
    """
    Id of the customer
    """
    customerId: ID!
  ): Customer!

  """
  Update a customer
  """
  customerUpdate(
    """
    Id of the customer
    """
    customerId: ID!
    data: CustomerInput!
  ): Customer!

  """
  Create a new project
  """
  projectCreate(data: ProjectInput!): Project!

  """
  Delete a project
  """
  projectDelete(
    """
    id of the project
    """
    id: ID!
  ): Project!

  """
  Update a project
  """
  projectUpdate(
    data: ProjectInput!

    """
    id of the project
    """
    id: ID!
  ): Project!

  """
  Archive a task
  """
  taskArchive(
    """
    id of the task
    """
    taskId: ID!
  ): Task!

  """
  Create a new Task
  """
  taskCreate(data: TaskInput!): Task!

  """
  Delete a task
  """
  taskDelete(
    """
    id of the task
    """
    id: ID!
  ): Task!

  """
  Update a task
  """
  taskUpdate(
    data: TaskInput!

    """
    id of the task
    """
    id: ID!
  ): Task!

  """
  Accept an invite to a team
  """
  teamAcceptInvite(
    """
    Invite key of the team
    """
    inviteKey: String!
  ): Team!

  """
  Archive a team
  """
  teamArchive(
    """
    id of the team
    """
    teamId: ID!
  ): Team!

  """
  Create a new team
  """
  teamCreate(data: TeamInput!): Team!

  """
  Delete a new team
  """
  teamDelete(
    """
    Id of the team
    """
    id: ID!
  ): Team!

  """
  Update a new team
  """
  teamUpdate(
    data: TeamInput!

    """
    Id of the team
    """
    id: ID!
  ): Team!

  """
  Update a user role
  """
  userRoleUpdate(
    role: Role!

    """
    Id of the user
    """
    userId: ID!
  ): User!

  """
  Create a new WorkHour
  """
  workHourCreate(data: WorkHourInput!): WorkHour!

  """
  Delete a work hour entry
  """
  workHourDelete(
    """
    id of the workHour item
    """
    id: ID!
  ): WorkHour!

  """
  Updates a work hour entry
  """
  workHourUpdate(
    data: WorkHourInput!

    """
    id of the work hour item
    """
    id: ID!
  ): WorkHour!
}

type Project implements ModifyInterface {
  """
  Can the user modify the entity
  """
  canModify: Boolean!

  """
  Customer of the project
  """
  customer: Customer
  endDate: Date

  """
  identifies the project
  """
  id: ID!

  """
  List of users that are member of the project
  """
  members: [User!]!
  startDate: Date
  tasks(showArchived: Boolean! = false): [Task!]!
  title: String!
  workHours: [WorkHour!]!
}

input ProjectInput {
  """
  Id of the customer to which the project belongs.
  """
  customerId: ID
  end: Date
  start: Date
  title: String!
}

type Query {
  """
  Returns a single customer
  """
  customer(
    """
    Id of the customer
    """
    customerId: ID!
  ): Customer!

  """
  Returns a single project
  """
  project(
    """
    Identifier for the project
    """
    projectId: ID!
  ): Project!

  """
  Returns a list of all projects
  """
  projects: [Project!]!

  """
  Returns a monthly project report
  """
  report(
    from: Date!

    """
    Project identifier
    """
    projectId: ID!
    to: Date!
  ): Report!

  """
  Returns a single task
  """
  task(
    """
    Identifier for the task
    """
    taskId: ID!
  ): Task!

  """
  Return team by slug provided in the api route (/api/[teamSlug]/graphql)
  """
  team: Team!

  """
  Return a team by a slug
  """
  teamBySlug(
    """
    slug of the team
    """
    slug: String!
  ): Team!

  """
  Return all teams
  """
  teams(
    """
    Show archived teams
    """
    includeArchived: Boolean! = false
  ): [Team!]!

  """
  Returns a single user
  """
  user(
    """
    Identifier for the user. If not provided, the logged in user is returned
    """
    userId: ID
  ): User!
  users: [User!]! @deprecated(reason: "Use members field on team type instead")

  """
  Returns a list of work hours for a given time period and a list of users
  """
  workHours(
    """
    Start of the time period
    """
    from: Date!
    teamSlug: String!

    """
    End of the time period. If not provided the from arg is used as the end.
    """
    to: Date

    """
    List of user ids. If not provided only the work hours of the current users are returned.
    """
    userIds: [ID!]
  ): [WorkHour!]!
}

type Report {
  groupedByDate: [ReportGroupedByDate!]!
  groupedByTask: [ReportGroupedByTask!]!
  groupedByUser: [ReportGroupedByUser!]!
}

type ReportGroupedByDate {
  """
  Booking date of the work hour
  """
  date: Date!

  """
  Sum of the total duration of all the work hours for the specific date
  """
  duration: Int!
  workHours: [WorkHour!]!
}

type ReportGroupedByTask {
  """
  Sum of the total duration of all the work hours for the task
  """
  duration: Int!
  task: Task!
  workHours: [WorkHour!]!
}

type ReportGroupedByUser {
  """
  Sum of the total duration of all the work hours for a specific user
  """
  duration: Int!
  user: User!
  workHours: [WorkHour!]!
}

"""
Roles a user can have in a team
"""
enum Role {
  ADMIN
  MEMBER
}

type Task implements ModifyInterface {
  archived: Boolean!

  """
  Can the user modify the entity
  """
  canModify: Boolean!
  hasWorkHours: Boolean!

  """
  Identifies the task
  """
  id: ID!
  project: Project!

  """
  The user can identify the task in the UI
  """
  title: String!
  workhours: [WorkHour!]!
}

input TaskInput {
  projectId: ID!
  title: String!
}

type Team implements ModifyInterface {
  archived: Boolean!

  """
  Can the user modify the entity
  """
  canModify: Boolean!

  """
  List of all customers of the team
  """
  customers: [Customer!]!

  """
  Identifier of the team
  """
  id: ID!
  inviteKey: String!

  """
  All members of the team
  """
  members: [User!]!

  """
  List of all projects of the team
  """
  projects: [Project!]!

  """
  Slug that is used in the team URL
  """
  slug: String!

  """
  Color theme of the team
  """
  theme: Theme!

  """
  Title of the team
  """
  title: String!
}

input TeamInput {
  """
  Slug that is used in the team URL
  """
  slug: String!

  """
  Color theme of the team
  """
  theme: Theme

  """
  Title of the team
  """
  title: String!
}

enum Theme {
  BLUE
  GRAY
  GREEN
  INDIGO
  PINK
  PURPLE
  RED
  YELLOW
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

type User {
  id: ID!
  image: String
  name: String

  """
  Returns the list of projects where the user is a member
  """
  projects: [Project!]!

  """
  Role of the user in the current team
  """
  role: Role!
}

type WorkHour {
  comment: String
  date: Date!

  """
  Duration of the work hour in minutes
  """
  duration: Int!

  """
  Identifies the work hour
  """
  id: ID!
  project: Project!

  """
  Task for which the working hour was booked
  """
  task: Task!

  """
  User who booked the work hours
  """
  user: User!
}

input WorkHourInput {
  comment: String
  date: Date!

  """
  Duration of the work hour in minutes
  """
  duration: Int!
  taskId: ID!
}
