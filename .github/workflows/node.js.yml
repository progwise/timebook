# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - run: pnpm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - run: docker-compose -f ./docker-compose.yml up -d
      - run: pnpm run test

  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - run: pnpm run lint

  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - run: pnpm run format:check

  graphqlCodeGenerator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - run: pnpm run graphql:generate
      - run: node apps/web/.ci/check-graphql-generator

  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://timebookdbuser:Test123@localhost:5432/timebookdb?schema=public
      SECRET: secr3t
      NEXTAUTH_URL: http://localhost:3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - name: Install Playwright Browsers
        working-directory: ./apps/web-e2e
        run: pnpm exec playwright install --with-deps
      - name: Start postgres docker image
        run: docker-compose -f ./docker-compose.yml up -d
      - name: Migrate database
        run: pnpm run migrate-db
      - name: Run Playwright tests
        run: pnpm run e2e-tests
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: apps/web-e2e/playwright-report/
          retention-days: 30

  pulumi:
    needs: [build, test, eslint, prettier, graphqlCodeGenerator, e2e-tests]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: ./packages/pulumi
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - uses: pulumi/actions@v4
        with:
          command: up
          stack-name: prod
          upsert: true
          work-dir: ./packages/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}

  deploy:
    needs: [pulumi]
    runs-on: ubuntu-latest
    name: Deploy App
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: DigitalOcean App Platform deployment
        uses: digitalocean/app_action@main
        with:
          app_name: timebook
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  migrate:
    name: Migrate Database
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 7
          run_install: true
      - name: Database migration
        run: pnpm run migrate-db
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  discord:
    name: Discord
    needs: [migrate]
    runs-on: ubuntu-latest
    steps:
      - name: 'send message'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: '**{{ EVENT_PAYLOAD.sender.login }}** has deployed **${{ github.event.head_commit.message }}** on production ðŸŽ‰'
