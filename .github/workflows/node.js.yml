# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run build --if-present

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - run: npm ci
      - run: docker-compose up -d
      - run: npm test

  eslint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run lint

  prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run format:check

  graphqlCodeGenerator:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run graphql:generate
      - run: node .ci/check-graphql-generator

  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    env:
      DATABASE_URL: postgresql://timebookdbuser:Test123@localhost:5432/timebookdb?schema=public
      SECRET: secr3t
      NEXTAUTH_URL: http://localhost:3000
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Start postgres docker image
        run: docker-compose up -d
      - name: Migrate database
        run: npx prisma migrate deploy
      - name: Run Playwright tests
        run: npm run e2e-tests
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    needs: [build, test, eslint, prettier, graphqlCodeGenerator, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy-to-digitalocean'
    name: Deploy App
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: DigitalOcean App Platform deployment
        uses: digitalocean/app_action@main
        with:
          app_name: timebook-app
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  migrate:
    name: Migrate Database
    needs: [deployment]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Database migration
        run: npx migrate deploy
